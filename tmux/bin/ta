#!/usr/bin/env bash
# ═══════════════════════════════════════════════════════
# Tmux Attach - 智能 Tmux Session Wrapper
# Created for Frank Yang - VibeGhostty Project
# ═══════════════════════════════════════════════════════
#
# 快速 attach 到當前專案的 tmux session
# 只需輸入 2 個字元即可！支援 fuzzy matching！
#
# Usage:
#   ta                   自動偵測當前專案
#   ta -l                列出所有 session
#   ta -n NAME           attach 到指定 session (支援模糊匹配)
#   ta -s PATTERN        搜尋匹配的 sessions
#   ta -h                顯示幫助
#
# ═══════════════════════════════════════════════════════

set -e

# ───────────────────────────────────────────────────────
# Colors
# ───────────────────────────────────────────────────────

BOLD="\033[1m"
BLUE="\033[38;5;111m"
CYAN="\033[36m"
GREEN="\033[32m"
YELLOW="\033[33m"
RED="\033[31m"
ORANGE="\033[38;5;215m"
RESET="\033[0m"

# ───────────────────────────────────────────────────────
# Helper Functions
# ───────────────────────────────────────────────────────

print_success() {
    echo -e "${GREEN}✅ $1${RESET}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${RESET}"
}

print_error() {
    echo -e "${RED}❌ $1${RESET}"
}

print_info() {
    echo -e "${CYAN}ℹ️  $1${RESET}"
}

print_rocket() {
    echo -e "${BLUE}🚀 $1${RESET}"
}

show_help() {
    cat << 'EOF'
╔════════════════════════════════════════════════════════════╗
║              ta - 智能 Tmux Session 管理工具               ║
╚════════════════════════════════════════════════════════════╝

EOF
    echo -e "${BOLD}${BLUE}用法：${RESET}"
    echo ""
    echo "  ta                   自動偵測當前專案並 attach"
    echo "  ta -l                列出所有 tmux session (詳細表格)"
    echo "  ta --list            同上"
    echo "  ta -n NAME           attach 到指定名稱的 session (支援模糊匹配)"
    echo "  ta --name NAME       同上"
    echo "  ta -s PATTERN        搜尋匹配 pattern 的 sessions"
    echo "  ta --search PATTERN  同上"
    echo "  ta -h                顯示此幫助"
    echo "  ta --help            同上"
    echo ""
    echo -e "${BOLD}${ORANGE}功能特色：${RESET}"
    echo ""
    echo "  🎯 自動偵測"
    echo "     • Git repo → session 名稱 = ai-{repo_name}"
    echo "     • 非 git → session 名稱 = ai-{directory_name}"
    echo ""
    echo "  🔍 模糊匹配 (Fuzzy Matching)"
    echo "     • 部分匹配：'vibe' 可匹配 'ai-vibeghostty'"
    echo "     • 不區分大小寫：'WORK' 可匹配 'ai-work'"
    echo "     • 多個匹配 → 互動式選單讓你選擇"
    echo ""
    echo "  📋 增強列表顯示"
    echo "     • 表格格式顯示 session 資訊"
    echo "     • 顯示視窗數、創建時間、attached 狀態"
    echo "     • 使用顏色和 emoji 提升可讀性"
    echo ""
    echo "  🔄 Tmux 內部支援"
    echo "     • 已在 tmux 內 → 使用 switch-client"
    echo "     • 不在 tmux 內 → 使用 attach-session"
    echo ""
    echo -e "${BOLD}${GREEN}使用範例：${RESET}"
    echo ""
    echo "  # 在專案目錄快速 attach"
    echo "  $ cd ~/projects/VibeGhostty"
    echo "  $ ta"
    echo ""
    echo "  # 模糊匹配 session 名稱"
    echo "  $ ta -n vibe          # 匹配 'ai-vibeghostty'"
    echo "  $ ta -n work          # 匹配所有包含 'work' 的 sessions"
    echo ""
    echo "  # 搜尋特定 pattern"
    echo "  $ ta -s ai-           # 列出所有以 'ai-' 開頭的 sessions"
    echo "  $ ta -s backend       # 列出所有包含 'backend' 的 sessions"
    echo ""
    echo "  # 列出所有 session（增強表格格式）"
    echo "  $ ta -l"
    echo ""
    echo "════════════════════════════════════════════════════════════"
    echo ""
}

list_sessions() {
    if ! tmux list-sessions &>/dev/null; then
        print_warning "目前沒有任何 tmux session"
        echo ""
        echo "建議執行以下命令建立 AI Workspace："
        echo -e "  ${ORANGE}tmux-launch${RESET}  （互動式選單）"
        echo -e "  ${ORANGE}~/.tmux-layouts/ai-workspace.sh${RESET}  （直接建立）"
        echo ""
        return 1
    fi

    echo -e "${BOLD}${CYAN}📋 可用的 Tmux Sessions${RESET}"
    echo ""

    # 表格標題
    printf "  ${BOLD}%-3s %-30s %-8s %-20s %-10s${RESET}\n" "#" "Session Name" "Windows" "Created" "Status"
    echo "  ────────────────────────────────────────────────────────────────────────────"

    # 讀取所有 sessions 並排序
    local index=1
    tmux list-sessions -F "#{session_name}|#{session_windows}|#{session_created}|#{session_attached}" | sort | while IFS='|' read -r name windows created attached; do
        # 格式化創建時間
        local created_time=$(date -r "$created" "+%Y-%m-%d %H:%M" 2>/dev/null || echo "Unknown")

        # 根據 attached 狀態設定顯示
        if [[ "$attached" == "1" ]]; then
            local status="${GREEN}✓ Attached${RESET}"
            local name_display="${BOLD}${GREEN}$name${RESET}"
            local icon="${GREEN}●${RESET}"
        else
            local status="${YELLOW}○ Detached${RESET}"
            local name_display="$name"
            local icon="${YELLOW}○${RESET}"
        fi

        # 輸出表格行
        printf "  ${icon} %-2s %-30s %-8s %-20s %b\n" "$index" "$name_display" "$windows" "$created_time" "$status"
        index=$((index + 1))
    done

    echo ""
}

# 搜尋 sessions（支援正則表達式）
search_sessions() {
    local pattern="$1"

    if ! tmux list-sessions &>/dev/null; then
        print_warning "目前沒有任何 tmux session"
        return 1
    fi

    echo -e "${BOLD}${CYAN}🔍 搜尋結果 (pattern: '$pattern')${RESET}"
    echo ""

    # 使用 grep 進行不區分大小寫搜尋
    local matches=$(tmux list-sessions -F "#{session_name}" | grep -i "$pattern" || true)

    if [[ -z "$matches" ]]; then
        print_warning "沒有找到匹配 '$pattern' 的 session"
        echo ""
        echo "建議："
        echo "  • 使用 ${ORANGE}ta -l${RESET} 查看所有 sessions"
        echo "  • 確認拼寫是否正確"
        echo ""
        return 1
    fi

    # 顯示匹配的 sessions（使用表格格式）
    printf "  ${BOLD}%-3s %-30s %-8s %-10s${RESET}\n" "#" "Session Name" "Windows" "Status"
    echo "  ───────────────────────────────────────────────────────────"

    local index=1
    echo "$matches" | while read -r name; do
        local session_info=$(tmux list-sessions -F "#{session_name}|#{session_windows}|#{session_attached}" | grep "^${name}|")
        IFS='|' read -r _ windows attached <<< "$session_info"

        if [[ "$attached" == "1" ]]; then
            local status="${GREEN}✓ Attached${RESET}"
            local icon="${GREEN}●${RESET}"
        else
            local status="${YELLOW}○ Detached${RESET}"
            local icon="${YELLOW}○${RESET}"
        fi

        printf "  ${icon} %-2s %-30s %-8s %b\n" "$index" "$name" "$windows" "$status"
        index=$((index + 1))
    done

    echo ""
    echo "找到 $(echo "$matches" | wc -l | tr -d ' ') 個匹配的 sessions"
    echo ""
}

get_project_session_name() {
    local current_dir="$PWD"
    local project_name=""

    # 檢查是否為 git repo
    if git rev-parse --is-inside-work-tree &>/dev/null; then
        # 取得 repo root 的名稱
        local repo_root=$(git rev-parse --show-toplevel)
        project_name=$(basename "$repo_root")
    else
        # 使用當前目錄名稱
        project_name=$(basename "$current_dir")
    fi

    # 建立 session 名稱（格式：ai-{project_name}）
    echo "ai-${project_name}"
}

check_session_exists() {
    local session_name="$1"
    tmux has-session -t "$session_name" 2>/dev/null
}

# Fuzzy matching - 尋找匹配的 sessions
find_matching_sessions() {
    local pattern="$1"

    if ! tmux list-sessions &>/dev/null; then
        return 1
    fi

    # 先嘗試精確匹配
    if tmux has-session -t "$pattern" 2>/dev/null; then
        echo "$pattern"
        return 0
    fi

    # 使用 grep 進行不區分大小寫的模糊匹配
    local matches=$(tmux list-sessions -F "#{session_name}" | grep -i "$pattern" || true)

    if [[ -n "$matches" ]]; then
        echo "$matches"
        return 0
    fi

    return 1
}

# 互動式選擇 session
select_session_interactive() {
    local matches="$1"
    local pattern="$2"

    local match_count=$(echo "$matches" | wc -l | tr -d ' ')

    # 只有一個匹配，直接返回
    if [[ "$match_count" -eq 1 ]]; then
        echo "$matches"
        return 0
    fi

    # 多個匹配，顯示選單
    echo ""
    echo -e "${BOLD}${CYAN}🔍 找到 $match_count 個匹配 '$pattern' 的 sessions${RESET}"
    echo ""

    # 顯示選單
    printf "  ${BOLD}%-3s %-30s %-8s %-10s${RESET}\n" "#" "Session Name" "Windows" "Status"
    echo "  ───────────────────────────────────────────────────────────"

    local index=1
    local -a session_array=()

    while IFS= read -r name; do
        session_array+=("$name")
        local session_info=$(tmux list-sessions -F "#{session_name}|#{session_windows}|#{session_attached}" | grep "^${name}|")
        IFS='|' read -r _ windows attached <<< "$session_info"

        if [[ "$attached" == "1" ]]; then
            local status="${GREEN}✓ Attached${RESET}"
            local icon="${GREEN}●${RESET}"
        else
            local status="${YELLOW}○ Detached${RESET}"
            local icon="${YELLOW}○${RESET}"
        fi

        printf "  ${icon} %-2s %-30s %-8s %b\n" "$index" "$name" "$windows" "$status"
        index=$((index + 1))
    done <<< "$matches"

    echo ""
    echo -e "${BOLD}選擇要 attach 的 session (輸入編號或按 Ctrl+C 取消):${RESET}"
    read -p "> " choice

    # 驗證輸入
    if [[ ! "$choice" =~ ^[0-9]+$ ]] || [[ "$choice" -lt 1 ]] || [[ "$choice" -gt "$match_count" ]]; then
        echo ""
        print_error "無效的選擇: $choice"
        return 1
    fi

    # 返回選中的 session
    echo "${session_array[$((choice - 1))]}"
    return 0
}

attach_to_session() {
    local session_name="$1"

    # 檢查是否已在 tmux 內
    if [[ -n "$TMUX" ]]; then
        # 在 tmux 內，使用 switch-client
        print_success "切換到 session '$session_name'..."
        tmux switch-client -t "$session_name"
    else
        # 不在 tmux 內，使用 attach-session
        print_success "連接到 session '$session_name'..."
        tmux attach-session -t "$session_name"
    fi
}

create_new_session() {
    local session_name="$1"
    local project_dir="$PWD"

    echo ""
    print_warning "Session '$session_name' 不存在"
    echo ""
    echo "是否使用 AI Workspace 布局建立新 session？"
    echo -e "布局：${CYAN}左側 Codex (70%) + 右側 Claude/Monitor (30%)${RESET}"
    echo ""
    read -p "確認建立？ [Y/n]: " confirm

    if [[ "$confirm" == "n" || "$confirm" == "N" ]]; then
        echo ""
        print_info "已取消"
        echo ""
        list_sessions
        return 1
    fi

    echo ""
    print_rocket "正在建立 AI Workspace..."

    # 檢查 ai-workspace.sh 是否存在
    local layout_script="$HOME/.tmux-layouts/ai-workspace.sh"

    if [[ ! -f "$layout_script" ]]; then
        print_error "找不到布局腳本：$layout_script"
        echo ""
        echo "請先執行安裝腳本："
        echo -e "  ${ORANGE}cd ~/Documents/GitHub/VibeGhostty/tmux${RESET}"
        echo -e "  ${ORANGE}./install.sh${RESET}"
        echo ""
        return 1
    fi

    # 執行布局腳本（不傳遞參數，讓它自動偵測）
    "$layout_script" "$project_dir"
}

# ───────────────────────────────────────────────────────
# Main Logic
# ───────────────────────────────────────────────────────

main() {
    # 檢查 tmux 是否安裝
    if ! command -v tmux &>/dev/null; then
        print_error "Tmux 未安裝"
        echo ""
        echo "請先安裝 Tmux："
        echo -e "  ${ORANGE}brew install tmux${RESET}  (macOS)"
        echo ""
        return 1
    fi

    # 解析參數
    case "${1:-}" in
        -h|--help)
            show_help
            return 0
            ;;
        -l|--list)
            list_sessions
            return 0
            ;;
        -s|--search)
            if [[ -z "${2:-}" ]]; then
                print_error "請指定搜尋 pattern"
                echo ""
                echo "用法：ta -s PATTERN"
                echo "範例：ta -s ai-    (搜尋所有以 'ai-' 開頭的 sessions)"
                echo ""
                return 1
            fi

            search_sessions "$2"
            return 0
            ;;
        -n|--name)
            if [[ -z "${2:-}" ]]; then
                print_error "請指定 session 名稱"
                echo ""
                echo "用法：ta -n SESSION_NAME"
                echo ""
                list_sessions
                return 1
            fi

            local input_name="$2"

            # 先嘗試精確匹配
            if check_session_exists "$input_name"; then
                attach_to_session "$input_name"
                return 0
            fi

            # 精確匹配失敗，嘗試模糊匹配
            print_info "Session '$input_name' 不存在，嘗試模糊匹配..."
            echo ""

            local matches=$(find_matching_sessions "$input_name")
            local match_result=$?

            if [[ $match_result -ne 0 ]] || [[ -z "$matches" ]]; then
                print_error "沒有找到匹配 '$input_name' 的 session"
                echo ""
                echo "建議："
                echo "  • 使用 ${ORANGE}ta -l${RESET} 查看所有可用的 sessions"
                echo "  • 使用 ${ORANGE}ta -s '$input_name'${RESET} 搜尋相關的 sessions"
                echo "  • 確認拼寫是否正確（支援不區分大小寫）"
                echo ""
                echo "範例："
                echo "  ta -n vibe          # 會匹配 'ai-vibeghostty'"
                echo "  ta -n work          # 會匹配所有包含 'work' 的 sessions"
                echo ""
                list_sessions
                return 1
            fi

            # 有匹配，使用互動式選擇
            local selected_session=$(select_session_interactive "$matches" "$input_name")
            local select_result=$?

            if [[ $select_result -ne 0 ]] || [[ -z "$selected_session" ]]; then
                echo ""
                print_info "已取消"
                return 1
            fi

            echo ""
            print_success "模糊匹配成功：'$input_name' → '$selected_session'"
            attach_to_session "$selected_session"
            return 0
            ;;
        "")
            # 自動偵測模式
            local session_name=$(get_project_session_name)

            if check_session_exists "$session_name"; then
                attach_to_session "$session_name"
            else
                create_new_session "$session_name"
            fi
            return 0
            ;;
        *)
            print_error "未知的參數：$1"
            echo ""
            echo "使用 ta -h 查看幫助"
            echo ""
            return 1
            ;;
    esac
}

# 執行主程式
main "$@"
